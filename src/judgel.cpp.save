
#include <stdlib.h>
#include <stdio.h>
#include <chrono>
#include <filesystem>
#include <fstream>
#include <future>
#include <iomanip>
#include <iostream>
#include <thread>
#include <vector>
#include <algorithm>
#include "header/judgel.h"
#include "header/color.h"

using namespace std;
using namespace std::chrono;
using namespace std::filesystem; 

int main(int argc, char* argv[]){
    if(argc!=2){
        cout<<"Error: Invalid argument\n";
        PrintHelpPage();
        return 0;
    }
    string times=argv[1];
    for(int i =0; i<times.size(); i++){
        if(argv[1][i]<='0'||argv[1][i]>='9'){
            cout<<"Error: Time limit is not an integer\n";
            PrintHelpPage();
            return 0;
        }
    }
    int RunTimeLimit=stoi(argv[1]);
    if(!exists("~/.cache/judgel"))
        system("mkdir ~/.cache/judgel");

    if(!exists("testcase")){
        cout<<"Error: \"testcase\" not found\n";
        PrintHelpPage();
        return 0;
    }
    if(!exists("main.cpp")){
        cout<<"Error: \"main.cpp\" code file not found\n";
        PrintHelpPage();
        return 0;
    }
    system("clear");
    cout << ColorGray;
    cout << "Compiling program...\n\n";
    cout << ColorReset;
    system("g++ main.cpp -o ~/.cache/judgel/usr.out");
    cout << ColorRed;
    cout << "\nTest    Verdict   Time\n";
    cout << ColorReset;
    int incr=0;
    vector<path> tculp;
    for(path CurrentTestCase: recursive_directory_iterator("testcase")){
        tculp.push_back(CurrentTestCase);
    }
    sort(tculp.begin(), tculp.end());
    for(path CurrentTestCase: tculp){
        //To Do: Check runtime error status
        if(incr%2){
            bool ac=isac(CurrentTestCase);
            if(ac){
                cout<<"AC\n";
            }else{
                cout<<"WA\n";
            }
        }else{
            if(!exists("rm ~/.cache/judgel/out.txt"))system("rm ~/.cache/judgel/out.txt");
            //system("touch ~/.cache/judgel/out.txt");
            time_point<high_resolution_clock> UserProgramStart;
            time_point<high_resolution_clock> UserProgramStop;
            string RunCommand="~/.cache/judgel/usr.out < ";
            RunCommand+=CurrentTestCase.u8string();
            RunCommand+=" > ~/.cache/judgel/out.txt";
            cout<<CurrentTestCase.u8string()<<":P:\n";
            //Lambda function to run the async process
            auto RunSystem = [&UserProgramStart, &CurrentTestCase, &RunCommand, &UserProgramStop]() {
                UserProgramStart = high_resolution_clock::now();
                system(RunCommand.c_str());
                UserProgramStop = high_resolution_clock::now();
            };
            //Run the judgelprg.exe with .in testcase asyncly
            auto UserProgramFuture = async(launch::async, RunSystem);
            if(UserProgramFuture.wait_for(seconds(RunTimeLimit)) == future_status::timeout){
                cout<<"TLE\n";
                system("pkill -9 -f ~/.cache/judgel/usr.out");
            }
        }
        incr++;
    }
    return 0;
}
